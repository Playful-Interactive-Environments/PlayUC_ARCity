// This code automatically generated by TableCodeGen

using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class CSVLocalization: AManager<CSVLocalization>
{
    
    public class Row
    {
        public string key;
        public string english;
        public string german;
        public string french;
        public string dutch;

    }
    public TextAsset LocalizationFile;
    private string TextLocalization;
    public List<Row> rowList = new List<Row>();

    bool isLoaded = false;

    void Start()
    {
        LoadExternalFile();
        Load(TextLocalization);
    }
    void LoadExternalFile()
    {
        try
        {
            string _localizationPath = Path.Combine(Application.persistentDataPath, "TextLocalization.csv");
            TextLocalization = File.ReadAllText(_localizationPath, Encoding.UTF8);
            Debug.Log("File found.");
            NetworkingManager.Instance.DebugText.text = "found";
        }
        catch (Exception c)
        {
            Debug.Log("No file found. Loading defaults.");
            TextLocalization = LocalizationFile.text;
        }
    }

    void Update()
    {

    }

    #region CSV Commands
    public List<Row> GetRowList()
    {
        return rowList;
    }

    public bool IsLoaded()
    {
        return isLoaded;
    }
    public void Load(string text)
    {
        rowList.Clear();
        string[][] grid = CsvParser2.Parse(text);
        for (int i = 0; i < grid.Length; i++)
        {
            Row row = new Row();
            row.key = grid[i][0];
            row.english = grid[i][1];
            row.german = grid[i][2];
            row.french = grid[i][3];
            row.dutch = grid[i][4];
            rowList.Add(row);
        }
        isLoaded = true;
    }

    public int NumRows()
    {
        return rowList.Count;
    }

    public Row GetAt(int i)
    {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row GetWord(int id)
    {
        return rowList[id];
    }
    public Row GetWord(string key)
    {
        return rowList.Find(x => x.key == key);
    }
    public string GetWord(string key, string language)
    {
        switch (language)
        {
            case "english":
                return rowList.Find(x => x.key == key).english;
            case "german":
                return rowList.Find(x => x.key == key).german;
            case "french":
                return rowList.Find(x => x.key == key).french;
            case "dutch":
                return rowList.Find(x => x.key == key).dutch;
            default:
                return "Error";
        }
    }
    #endregion
}